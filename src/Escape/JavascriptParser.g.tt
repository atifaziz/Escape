<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ output extension=".cs" #>
#region BSD 2-Clause License
//
// Copyright (C) 2014, Atif Aziz
// Copyright (C) 2013, Sebastien Ros
// Copyright (C) 2013, Thaddee Tyl <thaddee.tyl@gmail.com>
// Copyright (C) 2012, Mathias Bynens <mathias@qiwi.be>
// Copyright (C) 2012, Joost-Wim Boekesteijn <joost-wim@boekesteijn.nl>
// Copyright (C) 2012, Kris Kowal <kris.kowal@cixar.com>
// Copyright (C) 2012, Yusuke Suzuki <utatane.tea@gmail.com>
// Copyright (C) 2012, Arpad Borsos <arpad.borsos@googlemail.com>
// Copyright (C) 2011, Ariya Hidayat <ariya.hidayat@gmail.com>
// All rights reserved.
// 
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
// 
//   * Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
//
//   * Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
#endregion

// This code was generated by a tool. Any changes made manually will be lost
// the next time this code is regenerated.
// Generated: <#= DateTimeOffset.Now.ToString("r") #>

namespace Escape
{
    partial class JavaScriptParser
    {
        // The C# compiler uses a dictionary when the number of string 
        // cases in a switch statement exceeds six. The following 
        // functions are optimized set containment checks where a 
        // switch is broken into two levels to prevent the compiler 
        // from using a dictionary. In tests, this showed at least a 
        // 20% performance improvement most of the time.

<#
    var sets = new[]
    {
        new 
        { 
            Name = "Keyword", Members = new[] 
            {
                "if", "in", "do", "var", "for", "new", "try", "let",
                "this", "else", "case", "void", "with", "enum",
                "while", "break", "catch", "throw", "const", "yield",
                "class", "super", "return", "typeof", "delete",
                "switch", "export", "import", "default", "finally", "extends",
                "function", "continue", "debugger", "instanceof"
            } 
        },
        new 
        { 
            Name = "StrictModeReservedWord", Members = new[] 
            {
                "implements",
                "interface",
                "package",
                "private",
                "protected",
                "public",
                "static",
                "yield",
                "let"
            } 
        },
        new 
        { 
            Name = "FutureReservedWord", Members = new[] 
            {
                "class",
                "enum",
                "export",
                "extends",
                "import",
                "super"
            }
        },
    };

    foreach (var set in sets)
    { #>
        static bool In<#= set.Name #>Set(string term)
        {
            if (string.IsNullOrEmpty(term)) return false;
            switch (term[0])
            {
                default: return false;
<#      foreach (var g in from m in set.Members
                          group m by m[0] into g 
                          orderby g.Key 
                          select new { g.Key, Members = g.ToArray() })
            { #>
                case '<#= g.Key #>':<#
            if (g.Members.Length == 1)
            {
            #> return term == "<#= g.Members.Single() #>";
<#          }
            else
            { #>

                {
                    switch (term)
                    { <#
                foreach (var m in from m in g.Members orderby m select m) 
                { #> 
                        case "<#= m #>":<# } #> return true;
                        default: return false;
                    }
                }
<#          }
        } #>
            }
        }

<#  } #>
    }
}